//
//  BitStream.cpp
//  DataCompress
//
//  Created by Lei Yue on 2023/2/4.
//

#include "BitStream.hpp"

static uint8_t left1[] = {
    0x00, //0000 0000
    0x80, //1000 0000
    0xC0, //1100 0000
    0xE0, //1110 0000
    0xF0, //1111 0000
    0xF8, //1111 1000
    0xFC, //1111 1100
    0xFE, //1111 1110
    0xFF, //1111 1111
};

static uint64_t left64_1[] = {
    0x0000000000000000, //0000000000000000000000000000000000000000000000000000000000000000
    0x8000000000000000, //10000000
    0xC000000000000000, //11000000
    0xE000000000000000, //1110000
    0xF000000000000000, //1111000
    0xF800000000000000, //11111000
    0xFC00000000000000, //11111100
    0xFE00000000000000, //11111110
    0xFF00000000000000, //111111110
    0xFF80000000000000, //1111111110000000
    0xFFC0000000000000, //1111111111000000
    0xFFE0000000000000, //1111111111100000
    0xFFF0000000000000, //1111111111110000
    0xFFF8000000000000, //1111111111111000
    0xFFFC000000000000, //1111111111111100
    0xFFFE000000000000, //1111111111111110
    0xFFFF000000000000, //11111111111111110
    0xFFFF800000000000, //111111111111111110000000
    0xFFFFC00000000000, //111111111111111111000000
    0xFFFFE00000000000, //111111111111111111100000
    0xFFFFF00000000000, //111111111111111111110000
    0xFFFFF80000000000, //111111111111111111111000
    0xFFFFFC0000000000, //111111111111111111111100
    0xFFFFFE0000000000, //111111111111111111111110
    0xFFFFFF0000000000, //1111111111111111111111110
    0xFFFFFF8000000000, //11111111111111111111111110000000
    0xFFFFFFC000000000, //11111111111111111111111111000000
    0xFFFFFFE000000000, //11111111111111111111111111100000
    0xFFFFFFF000000000, //11111111111111111111111111110000
    0xFFFFFFF800000000, //11111111111111111111111111111000
    0xFFFFFFFC00000000, //11111111111111111111111111111100
    0xFFFFFFFE00000000, //11111111111111111111111111111110
    0xFFFFFFFF00000000, //111111111111111111111111111111110
    0xFFFFFFFF80000000, //1111111111111111111111111111111110000000
    0xFFFFFFFFC0000000, //1111111111111111111111111111111111000000
    0xFFFFFFFFE0000000, //1111111111111111111111111111111111100000
    0xFFFFFFFFF0000000, //1111111111111111111111111111111111110000
    0xFFFFFFFFF8000000, //1111111111111111111111111111111111111000
    0xFFFFFFFFFC000000, //1111111111111111111111111111111111111100
    0xFFFFFFFFFE000000, //1111111111111111111111111111111111111110
    0xFFFFFFFFFF000000, //11111111111111111111111111111111111111110
    0xFFFFFFFFFF800000, //111111111111111111111111111111111111111110000000
    0xFFFFFFFFFFC00000, //111111111111111111111111111111111111111111000000
    0xFFFFFFFFFFE00000, //111111111111111111111111111111111111111111100000
    0xFFFFFFFFFFF00000, //111111111111111111111111111111111111111111110000
    0xFFFFFFFFFFF80000, //111111111111111111111111111111111111111111111000
    0xFFFFFFFFFFFC0000, //111111111111111111111111111111111111111111111100
    0xFFFFFFFFFFFE0000, //111111111111111111111111111111111111111111111110
    0xFFFFFFFFFFFF0000, //1111111111111111111111111111111111111111111111110
    0xFFFFFFFFFFFF8000, //11111111111111111111111111111111111111111111111110000000
    0xFFFFFFFFFFFFC000, //11111111111111111111111111111111111111111111111111000000
    0xFFFFFFFFFFFFE000, //11111111111111111111111111111111111111111111111111100000
    0xFFFFFFFFFFFFF000, //11111111111111111111111111111111111111111111111111110000
    0xFFFFFFFFFFFFF800, //11111111111111111111111111111111111111111111111111111000
    0xFFFFFFFFFFFFFC00, //11111111111111111111111111111111111111111111111111111100
    0xFFFFFFFFFFFFFE00, //11111111111111111111111111111111111111111111111111111110
    0xFFFFFFFFFFFFFF00, //111111111111111111111111111111111111111111111111111111110
    0xFFFFFFFFFFFFFF80, //1111111111111111111111111111111111111111111111111111111110000000
    0xFFFFFFFFFFFFFFC0, //1111111111111111111111111111111111111111111111111111111111000000
    0xFFFFFFFFFFFFFFE0, //1111111111111111111111111111111111111111111111111111111111100000
    0xFFFFFFFFFFFFFFF0, //1111111111111111111111111111111111111111111111111111111111110000
    0xFFFFFFFFFFFFFFF8, //1111111111111111111111111111111111111111111111111111111111111000
    0xFFFFFFFFFFFFFFFC, //1111111111111111111111111111111111111111111111111111111111111100
    0xFFFFFFFFFFFFFFFE, //1111111111111111111111111111111111111111111111111111111111111110
    0xFFFFFFFFFFFFFFFF, //1111111111111111111111111111111111111111111111111111111111111111
};



static uint64_t right64_1[] = {

    ~0xFFFFFFFFFFFFFFFF, //~1111111111111111111111111111111111111111111111111111111111111111
    ~0xFFFFFFFFFFFFFFFE, //1111111111111111111111111111111111111111111111111111111111111110
    ~0xFFFFFFFFFFFFFFFC, //1111111111111111111111111111111111111111111111111111111111111100
    ~0xFFFFFFFFFFFFFFF8, //1111111111111111111111111111111111111111111111111111111111111000
    ~0xFFFFFFFFFFFFFFF0, //1111111111111111111111111111111111111111111111111111111111110000
    ~0xFFFFFFFFFFFFFFE0, //1111111111111111111111111111111111111111111111111111111111100000
    ~0xFFFFFFFFFFFFFFC0, //1111111111111111111111111111111111111111111111111111111111000000
    ~0xFFFFFFFFFFFFFF80, //1111111111111111111111111111111111111111111111111111111110000000
    ~0xFFFFFFFFFFFFFF00, //111111111111111111111111111111111111111111111111111111110
    ~0xFFFFFFFFFFFFFE00, //11111111111111111111111111111111111111111111111111111110
    ~0xFFFFFFFFFFFFFC00, //11111111111111111111111111111111111111111111111111111100
    ~0xFFFFFFFFFFFFF800, //11111111111111111111111111111111111111111111111111111000
    ~0xFFFFFFFFFFFFF000, //11111111111111111111111111111111111111111111111111110000
    ~0xFFFFFFFFFFFFE000, //11111111111111111111111111111111111111111111111111100000
    ~0xFFFFFFFFFFFFC000, //11111111111111111111111111111111111111111111111111000000
    ~0xFFFFFFFFFFFF8000, //11111111111111111111111111111111111111111111111110000000
    ~0xFFFFFFFFFFFF0000, //1111111111111111111111111111111111111111111111110
    ~0xFFFFFFFFFFFE0000, //111111111111111111111111111111111111111111111110
    ~0xFFFFFFFFFFFC0000, //111111111111111111111111111111111111111111111100
    ~0xFFFFFFFFFFF80000, //111111111111111111111111111111111111111111111000
    ~0xFFFFFFFFFFF00000, //111111111111111111111111111111111111111111110000
    ~0xFFFFFFFFFFE00000, //111111111111111111111111111111111111111111100000
    ~0xFFFFFFFFFFC00000, //111111111111111111111111111111111111111111000000
    ~0xFFFFFFFFFF800000, //111111111111111111111111111111111111111110000000
    ~0xFFFFFFFFFF000000, //11111111111111111111111111111111111111110
    ~0xFFFFFFFFFE000000, //1111111111111111111111111111111111111110
    ~0xFFFFFFFFFC000000, //1111111111111111111111111111111111111100
    ~0xFFFFFFFFF8000000, //1111111111111111111111111111111111111000
    ~0xFFFFFFFFF0000000, //1111111111111111111111111111111111110000
    ~0xFFFFFFFFE0000000, //1111111111111111111111111111111111100000
    ~0xFFFFFFFFC0000000, //1111111111111111111111111111111111000000
    ~0xFFFFFFFF80000000, //1111111111111111111111111111111110000000
    ~0xFFFFFFFF00000000, //111111111111111111111111111111110
    ~0xFFFFFFFE00000000, //11111111111111111111111111111110
    ~0xFFFFFFFC00000000, //11111111111111111111111111111100
    ~0xFFFFFFF800000000, //11111111111111111111111111111000
    ~0xFFFFFFF000000000, //11111111111111111111111111110000
    ~0xFFFFFFE000000000, //11111111111111111111111111100000
    ~0xFFFFFFC000000000, //11111111111111111111111111000000
    ~0xFFFFFF8000000000, //11111111111111111111111110000000
    ~0xFFFFFF0000000000, //1111111111111111111111110
    ~0xFFFFFE0000000000, //111111111111111111111110
    ~0xFFFFFC0000000000, //111111111111111111111100
    ~0xFFFFF80000000000, //111111111111111111111000
    ~0xFFFFF00000000000, //111111111111111111110000
    ~0xFFFFE00000000000, //111111111111111111100000
    ~0xFFFFC00000000000, //111111111111111111000000
    ~0xFFFF800000000000, //111111111111111110000000
    ~0xFFFF000000000000, //11111111111111110
    ~0xFFFE000000000000, //1111111111111110
    ~0xFFFC000000000000, //1111111111111100
    ~0xFFF8000000000000, //1111111111111000
    ~0xFFF0000000000000, //1111111111110000
    ~0xFFE0000000000000, //1111111111100000
    ~0xFFC0000000000000, //1111111111000000
    ~0xFF80000000000000, //1111111110000000
    ~0xFF00000000000000, //111111110
    ~0xFE00000000000000, //11111110
    ~0xFC00000000000000, //11111100
    ~0xF800000000000000, //11111000
    ~0xF000000000000000, //1111000
    ~0xE000000000000000, //1110000
    ~0xC000000000000000, //11000000
    ~0x8000000000000000, //10000000
    0xFFFFFFFFFFFFFFFF,  //0000000000000000000000000000000000000000000000000000000000000000








};

static uint8_t right1[] = {
    0x00, //0000 0000
    0x01, //0000 0001
    0x03, //0000 0011
    0x07, //0000 0111
    0x0F, //0000 1111
    0x1F, //0001 1111
    0x3F, //0011 1111
    0x7F, //0111 1111
    0xFF, //1111 1111
};

int BitStream::write(const Bits& bitx)  {
    Bits bits = bitx;
    assert(bits.bitLen <= 64);
    if(bits_size + bits.bitLen >= mBuff.size()*8) {
        //增加buf size
        mBuff.insert(mBuff.end(),32, 0);
    }
    uint32_t cur_bytes = bits_size>>3;
    uint32_t curentpadding = 8 - bits_size&0x07;



    uint8_t* p = mBuff.data() + cur_bytes;
    if(curentpadding > 0) {
        if(curentpadding >= bits.bitLen) {
            uint8_t x = bits.byte <<(curentpadding - bits.bitLen);
            *p = *p | x;
        } else {
            auto cnt = bits.bitLen/8;
            auto tail = bits.bitLen& 0x07;
            uint8_t maxb = (bits.byte >> (bits.bitLen - curentpadding));
//            if(tail-curentpadding > 0) {
//                maxb = maxb >> (tail-curentpadding);
//            } else {
//                maxb = maxb << (curentpadding - tail);
//            }

            //补pading
            *p = *p | maxb;
            //
            bits.byte =  bits.byte & right64_1[bits.bitLen - curentpadding];
            bits.bitLen -= curentpadding;

            cnt = bits.bitLen/8;
            tail = bits.bitLen& 0x07;
            int i = 0 ;
            for (i = 0; i < cnt; i++) {
                uint8_t d = bits.byte >> (bits.bitLen-(i+1)*8);
                *(p+i+1) = d;
            }
            uint8_t b = bits.byte<<(8-tail);
            *(p+i+1) = b;
        }

    } else {
        auto cnt = bits.bitLen/8;
        auto tail = bits.bitLen& 0x07;
        int i = 0;
        for (i = 0; i < cnt; i++) {
            uint8_t d = bits.byte >> (bits.bitLen-(i+1)*8);
            *(p+i) = d;
        }
//        uint8_t b = bits.byte & right1[tail]; b = b << (8-tail);
        uint8_t b = bits.byte<<(8-tail);

        *(p+i) = b;
    }
    bits_size += bitx.bitLen;
    return 0;
}

//int BitStream::write2(const Bits& bits){
//    return 0;
//}
//
//int BitStream::write(u_int64_t data, uint32_t bits) {
//    assert(bits <= 64);
//    uint32_t cur_bytes = bits>>3;
//    uint32_t curentpadding = bits&0x07;
//    if(curentpadding > 0) {
//        Bits b;
//        uint8_t x = data >> (8*cur_bytes);
//        b.byte =x;
//        b.bitLen = curentpadding;
//        write(b);
//    }
//    for (int i = 1; i < cur_bytes; i++) {
//        Bits b;
//        uint8_t x = data >> ((cur_bytes-i)*8);
//        b.byte =x;
//        b.bitLen = 8;
//        write(b);
//    }
//
//    return 0;
//}


int BitStream::read(Bits& outBit){
    uint8_t bits = outBit.bitLen;
    assert(bits <= 8);
    if(rd_pos + bits > bits_size) {
        outBit.bitLen = 0;
        return -1;
    }
    uint32_t cur_bytes = rd_pos>>3;
    uint32_t curentpadding = 8 - rd_pos&0x07;
    if(curentpadding == 0) {
        outBit.byte = mBuff[cur_bytes] >> (8-bits);

    } else {
        if (curentpadding >= bits) {
            uint8_t x = mBuff[cur_bytes] >> (curentpadding - bits);
            x = x & right1[bits];
            outBit.byte = x;
        } else {
            uint8_t x = mBuff[cur_bytes] & right1[bits];
            x = x << (bits - curentpadding);
            uint8_t x1 = mBuff[cur_bytes + 1] >> (curentpadding - bits);
            x = x & x1;
            outBit.byte = x;
        }
    }
    outBit.bitLen = bits;
    rd_pos += bits;
    return 0;
}


int BitStream::clear() {
    bits_size = 0;
    rd_pos = 0;
    wr_pos = 0;
    return 0;
}
